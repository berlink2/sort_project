{"version":3,"sources":["components/Algorithms/MergeSort.js","components/Algorithms/Helpers.js","components/Algorithms/QuickSort.js","components/Algorithms/InsertionSort.js","components/Visualizer/Visualizer.js","components/Algorithms/BubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["arr","duplicateArr","len","length","animations","mergeSortHelper","aux","left","right","mid","Math","floor","i","j","k","push","merge","slice","array","index1","index2","temp","copy","quickSortHelper","part","pivot","swap","partition","windowWidth","window","innerWidth","ANIMATION_SPEED","ARRAY_BAR_NUM","ARRAY_BAR_HEIGHT","useState","setArray","sortAlgo","setSortAlgo","worst","setWorst","avg","setAvg","best","setBest","isSorting","setIsSorting","containerRef","useRef","seconds","setSeconds","isActive","setIsActive","barRef","useEffect","interval","setInterval","clearInterval","resetArray","value","min","max","resetArrayColour","random","arrayBars","current","children","style","backgroundColor","animateArrayUpdate","totalTime","bar","fillBar","forEach","index","comparison","swapped","setTimeout","prevArr","newValue","newArr","animateArrayAccess","animateSortedArray","arrayBarStyle","className","ref","map","key","height","href","onClick","MergeSort","QuickSort","InsertionSort","BubbleSort","App","Visualizer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a6dca067.chunk.js","sourcesContent":["export default  (arr) => {\n    const duplicateArr = [...arr];\n    const len = duplicateArr.length;\n    const aux = arr.slice();\n    const animations = [];\n    mergeSortHelper(duplicateArr, aux, 0, len - 1, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(arr, aux, left, right, animations) {\n    if (right <= left) return;\n    const mid = left + Math.floor((right - left) / 2);\n    mergeSortHelper(arr, aux, left, mid, animations);\n    mergeSortHelper(arr, aux, mid + 1, right, animations);\n    merge(arr, aux, left, mid, right, animations);\n  }\n  \n  function merge(arr, aux, left, mid, right, animations) {\n    for (let i = left; i <= right; i++) aux[i] = arr[i];\n    let i = left;\n    let j = mid + 1;\n    for (let k = left; k <= right; k++) {\n      if (i > mid) {\n        animations.push([[j], false]);\n        animations.push([[k, aux[j]], true]);\n        arr[k] = aux[j++];\n      } else if (j > right) {\n        animations.push([[i], false]);\n        animations.push([[k, aux[i]], true]);\n        arr[k] = aux[i++];\n      } else if (aux[j] < aux[i]) {\n        animations.push([[i, j], false]);\n        animations.push([[k, aux[j]], true]);\n        arr[k] = aux[j++];\n      } else {\n        animations.push([[i, j], false]);\n        animations.push([[k, aux[i]], true]);\n        arr[k] = aux[i++];\n      }\n    }\n  }","export default (array, index1, index2) => {\n    const temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","import swap from './Helpers';\n\nexport default (arr)=> {\n    const copy = [...arr];\n    const animations = [];\n    quickSortHelper(copy, 0, copy.length - 1, animations);\n    return animations;\n  }\n  \n  function quickSortHelper(arr, left, right, animations) {\n    if (right <= left) return;\n    const part = partition(arr, left, right, animations);\n    quickSortHelper(arr, left, part, animations);\n    quickSortHelper(arr, part + 1, right, animations);\n  }\n  \n  function partition(arr, left, right, animations) {\n    let i = left;\n    let j = right + 1;\n    const pivot = arr[left];\n    while (true) {\n      while (arr[++i] <= pivot) {\n        if (i === right) break;\n        animations.push([[i], false]);\n      }\n      while (arr[--j] >= pivot) {\n        if (j === left) break;\n        animations.push([[j], false]);\n      }\n      if (j <= i) break;\n      animations.push([[i, arr[j]], true]);\n      animations.push([[j, arr[i]], true]);\n      swap(arr, i, j);\n    }\n    animations.push([[left, arr[j]], true]);\n    animations.push([[j, arr[left]], true]);\n    swap(arr, left, j);\n    return j;\n  }","import swap from './Helpers';\n\nexport default  (array) => {\n    const duplicateArr = [...array];\n    const animations = [];\n    for (let i = 1; i < duplicateArr.length; i++) {\n      for (let j = i - 1; j >= 0; j--) {\n        animations.push([[j, j + 1], false]);\n        if (duplicateArr[j + 1] < duplicateArr[j]) {\n          animations.push([[j, duplicateArr[j + 1]], true]);\n          animations.push([[j + 1, duplicateArr[j]], true]);\n          swap(duplicateArr, j, j + 1);\n        } else {\n        break;\n        }\n      }\n    }\n    return animations;\n  }","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./visualizer.css\";\nimport MergeSort from \"../Algorithms/MergeSort\";\nimport QuickSort from \"../Algorithms/QuickSort\";\nimport InsertionSort from \"../Algorithms/InsertionSort\";\nimport BubbleSort from \"../Algorithms/BubbleSort\";\n\nconst windowWidth = window.innerWidth;\nlet ANIMATION_SPEED = 0;\nlet ARRAY_BAR_NUM = 0;\nlet ARRAY_BAR_HEIGHT = 400;\n\n//switch case to change number of bars according to screen size\nswitch (true) {\n  case windowWidth >= 1400: {\n    ANIMATION_SPEED = 4;\n    ARRAY_BAR_NUM = 200;\n    break;\n  }\n  case windowWidth < 1250 && windowWidth > 1000:\n    ANIMATION_SPEED = 4;\n    ARRAY_BAR_NUM = 190;\n    break;\n\n  case windowWidth <= 1000 && windowWidth > 800: {\n    ANIMATION_SPEED = 6;\n    ARRAY_BAR_NUM = 150;\n    break;\n  }\n  case windowWidth <= 800 && windowWidth > 650: {\n    ANIMATION_SPEED = 10;\n    ARRAY_BAR_NUM = 100;\n    ARRAY_BAR_HEIGHT = 300;\n    break;\n  }\n  case windowWidth <= 650 && windowWidth > 500: {\n    ANIMATION_SPEED = 12;\n    ARRAY_BAR_NUM = 75;\n    ARRAY_BAR_HEIGHT = 250;\n    break;\n  }\n  case windowWidth <= 500 && windowWidth > 420: {\n    ANIMATION_SPEED = 20;\n    ARRAY_BAR_NUM = 50;\n    ARRAY_BAR_HEIGHT = 250;\n    break;\n  }\n  case windowWidth <= 420 && windowWidth > 300: {\n    ANIMATION_SPEED = 30;\n    ARRAY_BAR_NUM = 40;\n    ARRAY_BAR_HEIGHT = 250;\n    break;\n  }\n  default:\n    ANIMATION_SPEED = 4;\n    ARRAY_BAR_NUM = 200;\n}\n\nconst FINISHED_COLOR = \"greenyellow\";\nconst SORT_COLOR = \"red\";\n\nexport default () => {\n  const [array, setArray] = useState([]);\n  const [sortAlgo, setSortAlgo] = useState(\"-\");\n  const [worst, setWorst] = useState(\"-\");\n  const [avg, setAvg] = useState(\"-\");\n  const [best, setBest] = useState(\"-\");\n  const [isSorting, setIsSorting] = useState(false);\n  const containerRef = useRef(null);\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const barRef = useRef(null);\n\n  //function that fills bar\n  const fillBar = (totalTime) => {\n    const bar = barRef.current;\n    const interval = setInterval(() => {\n      bar.value = bar.value + 0.1;\n\n      if (bar.value >= 100) {\n        clearInterval(interval);\n      }\n    }, totalTime / 1000);\n  };\n\n  //starts timer\n  useEffect(() => {\n    let interval = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        setSeconds((seconds) => seconds + 1.0);\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds]);\n\n  //hook that calls reset function that resets array when page loads\n  useEffect(() => {\n    resetArray();\n  }, []);\n\n  //method for logic of resetting array\n  const resetArray = () => {\n    const array = [];\n    resetArrayColour();\n    let value;\n    for (let i = 0; i < ARRAY_BAR_NUM; i++) {\n      value = randomIntFromInterval(15, ARRAY_BAR_HEIGHT);\n      array.push(value);\n    }\n    setArray(array);\n    setSortAlgo(\"-\");\n    setWorst(\"-\");\n    setAvg(\"-\");\n    setBest(\"-\");\n    setSeconds(0);\n  };\n\n  //method that resets color of array\n  const resetArrayColour = () => {\n    const arrayBars = containerRef.current.children;\n    for (let i = 0; i < array.length; i++) {\n      const arrayBarStyle = arrayBars[i].style;\n      arrayBarStyle.backgroundColor = \"\";\n    }\n  };\n\n  //functions to call various sort algorithm implementations\n  //and fills in sort algorithm info table\n  const mergeSort = () => {\n    setSortAlgo(\"Merge Sort\");\n    setWorst(\"O (n log(n))\");\n    setAvg(\"O (n log(n))\");\n    setBest(\"O (n log(n))\");\n    const animations = MergeSort(array);\n    animateArrayUpdate(animations);\n  };\n\n  const quickSort = () => {\n    setSortAlgo(\"Quick Sort\");\n    setWorst(\"O (n^2)\");\n    setAvg(\"O (n log(n))\");\n    setBest(\"O (n log(n))\");\n    const animations = QuickSort(array);\n    animateArrayUpdate(animations);\n  };\n\n  const insertionSort = () => {\n    setSortAlgo(\"Insertion Sort\");\n    setWorst(\"O (n^2)\");\n    setAvg(\"O (n^2)\");\n    setBest(\"O (n)\");\n    const animations = InsertionSort(array);\n    animateArrayUpdate(animations);\n  };\n\n  const bubbleSort = () => {\n    setSortAlgo(\"Bubble Sort\");\n    setWorst(\"O (n^2)\");\n    setAvg(\"O (n^2)\");\n    setBest(\"O (n)\");\n    const animations = BubbleSort(array);\n    animateArrayUpdate(animations);\n  };\n\n  //function that starts sort animation\n  const animateArrayUpdate = (animations) => {\n    //calls function that fills bar and provides length of animation in ms\n    fillBar(animations.length * ANIMATION_SPEED);\n\n    setIsActive(true);\n    if (isSorting) return;\n    setIsSorting(true);\n    animations.forEach(([comparison, swapped], index) => {\n      setTimeout(() => {\n        if (!swapped) {\n          if (comparison.length === 2) {\n            const [i, j] = comparison;\n            animateArrayAccess(i);\n            animateArrayAccess(j);\n          } else {\n            const [i] = comparison;\n            animateArrayAccess(i);\n          }\n        } else {\n          setArray((prevArr) => {\n            const [k, newValue] = comparison;\n            const newArr = [...prevArr];\n            newArr[k] = newValue;\n            return newArr;\n          });\n        }\n      }, index * ANIMATION_SPEED);\n    });\n\n    setTimeout(() => {\n      animateSortedArray();\n    }, animations.length * ANIMATION_SPEED);\n  };\n\n  //function that animates array items that are being compared\n  const animateArrayAccess = (index) => {\n    const arrayBars = containerRef.current.children;\n    const arrayBarStyle = arrayBars[index].style;\n    setTimeout(() => {\n      arrayBarStyle.backgroundColor = SORT_COLOR;\n    }, ANIMATION_SPEED);\n    setTimeout(() => {\n      arrayBarStyle.backgroundColor = \"\";\n    }, ANIMATION_SPEED * 2);\n  };\n\n  //function that animates final sorted array\n  const animateSortedArray = () => {\n    setIsActive(false);\n    const arrayBars = containerRef.current.children;\n    for (let i = 0; i < arrayBars.length; i++) {\n      const arrayBarStyle = arrayBars[i].style;\n      setTimeout(\n        () => (arrayBarStyle.backgroundColor = FINISHED_COLOR),\n        i * ANIMATION_SPEED\n      );\n    }\n    setTimeout(() => {\n      setIsSorting(false);\n    }, arrayBars.length * ANIMATION_SPEED);\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"container info-container\">\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th>Sorting Algorthim</th>\n                <th>Worst Case Time Complexity</th>\n                <th>Average Case Time Complexity</th>\n                <th>Best Case Time Complexity</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              <tr>\n                <td>{sortAlgo}</td>\n                <td>{worst}</td>\n                <td>{avg}</td>\n                <td>{best}</td>\n              </tr>\n            </tbody>\n          </table>\n          <div>\n            <p>Time Elapsed: {seconds} seconds</p>\n          </div>\n          <div>\n            <progress\n              className=\"progress is-success\"\n              value=\"0\"\n              max=\"100\"\n              ref={barRef}\n            ></progress>\n          </div>\n        </div>\n        <div className=\"container array-container\" ref={containerRef}>\n          {array.map((value, i) => (\n            <div\n              className=\"array-bar\"\n              key={i}\n              style={{ height: `${value}px` }}\n            ></div>\n          ))}\n        </div>\n      </div>\n      <nav className=\"navbar is-fixed-bottom\">\n        <div className=\"navbar-start\">\n          <a className=\"navbar-item\" href=\"https://berlink2.github.io/Resume/\">\n            Contact Me\n          </a>\n        </div>\n        <div className=\"navbar-end\">\n          <div className=\"navbar-item\">\n            <div className=\"buttons\">\n              <button className=\"button is-primary\" onClick={mergeSort}>\n                Merge Sort\n              </button>\n              <button className=\"button is-primary\" onClick={quickSort}>\n                Quick Sort\n              </button>\n              <button className=\"button is-primary\" onClick={insertionSort}>\n                Insertion Sort\n              </button>\n              <button className=\"button is-primary\" onClick={bubbleSort}>\n                Bubble Sort\n              </button>\n              <button className=\"button is-primary\" onClick={resetArray}>\n                Reset Array\n              </button>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </>\n  );\n};\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import swap from \"./Helpers\";\n\nexport default (array) => {\n  const duplicateArr = [...array];\n  const animations = [];\n\n  let swapped;\n\n  for (let i = 0; i < duplicateArr.length - 1; i++) {\n    swapped = false;\n\n    for (let j = 0; j < duplicateArr.length - i - 1; j++) {\n      animations.push([[i, j], false]);\n      if (duplicateArr[j] > duplicateArr[j + 1]) {\n        animations.push([[j + 1, duplicateArr[j]], true]);\n        animations.push([[j, duplicateArr[j + 1]], true]);\n        // let temp =  duplicateArr[j];\n        // duplicateArr[j] = duplicateArr[j+1];\n        // duplicateArr[j+1] = temp;\n\n        swap(duplicateArr, j, j + 1);\n        swapped = true;\n      }\n    }\n    if (swapped === false) {\n      break;\n    }\n  }\n  return animations;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport Visualizer from \"./components/Visualizer/Visualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}